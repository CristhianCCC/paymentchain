#migrando los perfiles local, dev y prod al repositorio config-server-repo
#indicando la url en la cual se van a consumir los perfiles en este application properties
#importante, se debe poner la url del configserver el cual es el que va a consumir los archivos y pasarlo a los microservicios
spring.config.import=optional:configserver:http://localhost:8888
#se define el nombre del nombre del archivo spring.cloud.config.name=config-client/application
#se define el perfil spring.cloud.config.profile=local/dev/prod

#conexion a la base de datos
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.datasource.url=jdbc:postgresql://postgres:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=qwerty


#Registrando a customer-dev como cliente a eureka server
spring.application.name=businessdomain-customer

#definiendo la url
eureka.client.service-url.defaultZone=${EUREKA_SERVER:http://localhost:8761/eureka}


#este microservicio debe actuar como un cliente de eureka y conectarse a un servidor
eureka.client.register-with-eureka=true

#activa el health check que para que cuando este disponible pueda enviar esa informacion al servidor de eureka
#para poder usar esta propiedad, se debe configurar actuator primero en el pomxml del parent---------------------------------------------------------
eureka.client.healthcheck.enabled=true

#debe descargar la informacion de todos los microservicios que esten para poder intentar conectarse a ellos
eureka.client.fetch-registry=true

spring.cloud.config.enabled=true


#para habilitar los endpoints de actuator
management.endpoints.web.exposure.include=*